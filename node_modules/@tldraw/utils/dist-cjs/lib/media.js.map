{
  "version": 3,
  "sources": ["../../src/lib/media.ts"],
  "sourcesContent": ["import { FileHelpers } from './file'\nimport { PngHelpers } from './png'\n\n/**\n * Helpers for media\n *\n * @public\n */\nexport class MediaHelpers {\n\t/**\n\t * Get the size of a video from its source.\n\t *\n\t * @param src - The source of the video.\n\t * @public\n\t */\n\tstatic async getVideoSizeFromSrc(src: string): Promise<{ w: number; h: number }> {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video')\n\t\t\tvideo.onloadeddata = () => resolve({ w: video.videoWidth, h: video.videoHeight })\n\t\t\tvideo.onerror = (e) => {\n\t\t\t\tconsole.error(e)\n\t\t\t\treject(new Error('Could not get video size'))\n\t\t\t}\n\t\t\tvideo.crossOrigin = 'anonymous'\n\t\t\tvideo.src = src\n\t\t})\n\t}\n\n\t/**\n\t * Get the size of an image from its source.\n\t *\n\t * @param dataURL - The file as a string.\n\t * @public\n\t */\n\tstatic async getImageSizeFromSrc(dataURL: string): Promise<{ w: number; h: number }> {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tconst img = new Image()\n\t\t\timg.onload = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst blob = await FileHelpers.base64ToFile(dataURL)\n\t\t\t\t\tconst view = new DataView(blob)\n\t\t\t\t\tif (PngHelpers.isPng(view, 0)) {\n\t\t\t\t\t\tconst physChunk = PngHelpers.findChunk(view, 'pHYs')\n\t\t\t\t\t\tif (physChunk) {\n\t\t\t\t\t\t\tconst physData = PngHelpers.parsePhys(view, physChunk.dataOffset)\n\t\t\t\t\t\t\tif (physData.unit === 0 && physData.ppux === physData.ppuy) {\n\t\t\t\t\t\t\t\tconst pixelRatio = Math.round(physData.ppux / 2834.5)\n\t\t\t\t\t\t\t\tresolve({ w: img.width / pixelRatio, h: img.height / pixelRatio })\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err)\n\t\t\t\t\tresolve({ w: img.width, h: img.height })\n\t\t\t\t}\n\t\t\t}\n\t\t\timg.onerror = (err) => {\n\t\t\t\tconsole.error(err)\n\t\t\t\treject(new Error('Could not get image size'))\n\t\t\t}\n\t\t\timg.crossOrigin = 'anonymous'\n\t\t\timg.src = dataURL\n\t\t})\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA4B;AAC5B,iBAA2B;AAOpB,MAAM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,aAAa,oBAAoB,KAAgD;AAChF,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7C,YAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,YAAM,eAAe,MAAM,QAAQ,EAAE,GAAG,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC;AAChF,YAAM,UAAU,CAAC,MAAM;AACtB,gBAAQ,MAAM,CAAC;AACf,eAAO,IAAI,MAAM,0BAA0B,CAAC;AAAA,MAC7C;AACA,YAAM,cAAc;AACpB,YAAM,MAAM;AAAA,IACb,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,oBAAoB,SAAoD;AACpF,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7C,YAAM,MAAM,IAAI,MAAM;AACtB,UAAI,SAAS,YAAY;AACxB,YAAI;AACH,gBAAM,OAAO,MAAM,wBAAY,aAAa,OAAO;AACnD,gBAAM,OAAO,IAAI,SAAS,IAAI;AAC9B,cAAI,sBAAW,MAAM,MAAM,CAAC,GAAG;AAC9B,kBAAM,YAAY,sBAAW,UAAU,MAAM,MAAM;AACnD,gBAAI,WAAW;AACd,oBAAM,WAAW,sBAAW,UAAU,MAAM,UAAU,UAAU;AAChE,kBAAI,SAAS,SAAS,KAAK,SAAS,SAAS,SAAS,MAAM;AAC3D,sBAAM,aAAa,KAAK,MAAM,SAAS,OAAO,MAAM;AACpD,wBAAQ,EAAE,GAAG,IAAI,QAAQ,YAAY,GAAG,IAAI,SAAS,WAAW,CAAC;AACjE;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAEA,kBAAQ,EAAE,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC;AAAA,QACxC,SAAS,KAAK;AACb,kBAAQ,MAAM,GAAG;AACjB,kBAAQ,EAAE,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC;AAAA,QACxC;AAAA,MACD;AACA,UAAI,UAAU,CAAC,QAAQ;AACtB,gBAAQ,MAAM,GAAG;AACjB,eAAO,IAAI,MAAM,0BAA0B,CAAC;AAAA,MAC7C;AACA,UAAI,cAAc;AAClB,UAAI,MAAM;AAAA,IACX,CAAC;AAAA,EACF;AACD;",
  "names": []
}
