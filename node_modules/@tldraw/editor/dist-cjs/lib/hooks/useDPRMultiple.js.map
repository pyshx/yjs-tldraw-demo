{
  "version": 3,
  "sources": ["../../../src/lib/hooks/useDPRMultiple.ts"],
  "sourcesContent": ["import { react } from '@tldraw/state'\nimport * as React from 'react'\nimport { useContainer } from './useContainer'\nimport { useEditor } from './useEditor'\n\n// Euclidean algorithm to find the GCD\nfunction gcd(a: number, b: number): number {\n\treturn b === 0 ? a : gcd(b, a % b)\n}\n\n// Returns the lowest value that the given number can be multiplied by to reach an integer\nexport function nearestMultiple(float: number) {\n\tconst decimal = float.toString().split('.')[1]\n\tif (!decimal) return 1\n\tconst denominator = Math.pow(10, decimal.length)\n\tconst numerator = parseInt(decimal, 10)\n\treturn denominator / gcd(numerator, denominator)\n}\n\nexport function useDPRMultiple() {\n\tconst editor = useEditor()\n\tconst container = useContainer()\n\n\tReact.useEffect(() => {\n\t\treturn react('useDPRMultiple', () => {\n\t\t\tconst dpr = editor.instanceState.devicePixelRatio\n\t\t\tcontainer.style.setProperty('--tl-dpr-multiple', nearestMultiple(dpr).toString())\n\t\t})\n\t}, [editor, container])\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAsB;AACtB,YAAuB;AACvB,0BAA6B;AAC7B,uBAA0B;AAG1B,SAAS,IAAI,GAAW,GAAmB;AAC1C,SAAO,MAAM,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AAClC;AAGO,SAAS,gBAAgB,OAAe;AAC9C,QAAM,UAAU,MAAM,SAAS,EAAE,MAAM,GAAG,EAAE,CAAC;AAC7C,MAAI,CAAC;AAAS,WAAO;AACrB,QAAM,cAAc,KAAK,IAAI,IAAI,QAAQ,MAAM;AAC/C,QAAM,YAAY,SAAS,SAAS,EAAE;AACtC,SAAO,cAAc,IAAI,WAAW,WAAW;AAChD;AAEO,SAAS,iBAAiB;AAChC,QAAM,aAAS,4BAAU;AACzB,QAAM,gBAAY,kCAAa;AAE/B,QAAM,UAAU,MAAM;AACrB,eAAO,oBAAM,kBAAkB,MAAM;AACpC,YAAM,MAAM,OAAO,cAAc;AACjC,gBAAU,MAAM,YAAY,qBAAqB,gBAAgB,GAAG,EAAE,SAAS,CAAC;AAAA,IACjF,CAAC;AAAA,EACF,GAAG,CAAC,QAAQ,SAAS,CAAC;AACvB;",
  "names": []
}
