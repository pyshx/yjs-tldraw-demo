{
  "version": 3,
  "sources": ["../../../src/lib/hooks/useDocumentEvents.ts"],
  "sourcesContent": ["import { useValue } from '@tldraw/state'\nimport { useEffect } from 'react'\nimport { TLKeyboardEventInfo, TLPointerEventInfo } from '../editor/types/event-types'\nimport { preventDefault } from '../utils/dom'\nimport { useContainer } from './useContainer'\nimport { useEditor } from './useEditor'\n\nexport function useDocumentEvents() {\n\tconst editor = useEditor()\n\tconst container = useContainer()\n\n\tconst isAppFocused = useValue('isFocused', () => editor.instanceState.isFocused, [editor])\n\n\tuseEffect(() => {\n\t\tif (typeof matchMedia === undefined) return\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n\t\tlet remove: (() => void) | null = null\n\t\tconst updatePixelRatio = () => {\n\t\t\tif (remove != null) {\n\t\t\t\tremove()\n\t\t\t}\n\t\t\tconst mqString = `(resolution: ${window.devicePixelRatio}dppx)`\n\t\t\tconst media = matchMedia(mqString)\n\t\t\tmedia.addEventListener('change', updatePixelRatio)\n\t\t\tremove = () => {\n\t\t\t\tmedia.removeEventListener('change', updatePixelRatio)\n\t\t\t}\n\t\t\teditor.updateInstanceState({ devicePixelRatio: window.devicePixelRatio })\n\t\t}\n\t\tupdatePixelRatio()\n\t\treturn () => {\n\t\t\tremove?.()\n\t\t}\n\t}, [editor])\n\n\tuseEffect(() => {\n\t\tif (!isAppFocused) return\n\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tif (\n\t\t\t\te.altKey &&\n\t\t\t\t// todo: When should we allow the alt key to be used? Perhaps states should declare which keys matter to them?\n\t\t\t\t(editor.isIn('zoom') || !editor.root.path.value.endsWith('.idle')) &&\n\t\t\t\t!isFocusingInput()\n\t\t\t) {\n\t\t\t\t// On windows the alt key opens the menu bar.\n\t\t\t\t// We want to prevent that if the user is doing something else,\n\t\t\t\t// e.g. resizing a shape\n\t\t\t\tpreventDefault(e)\n\t\t\t}\n\n\t\t\tif ((e as any).isKilled) return\n\t\t\t;(e as any).isKilled = true\n\n\t\t\tswitch (e.key) {\n\t\t\t\tcase '=':\n\t\t\t\tcase '-':\n\t\t\t\tcase '0': {\n\t\t\t\t\t// These keys are used for zooming. Technically we only use\n\t\t\t\t\t// the + - and 0 keys, however it's common for them to be\n\t\t\t\t\t// paired with modifier keys (command / control) so we need\n\t\t\t\t\t// to prevent the browser's regular actions (i.e. zooming\n\t\t\t\t\t// the page). A user can zoom by unfocusing the editor.\n\t\t\t\t\tif (e.metaKey || e.ctrlKey) {\n\t\t\t\t\t\tpreventDefault(e)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'Tab': {\n\t\t\t\t\tif (isFocusingInput() || editor.isMenuOpen) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase ',': {\n\t\t\t\t\t// todo: extract to extension\n\t\t\t\t\t// This seems very fragile; the comma key here is used to send pointer events,\n\t\t\t\t\t// but that means it also needs to know about pen mode, hovered ids, etc.\n\t\t\t\t\tif (!isFocusingInput()) {\n\t\t\t\t\t\tpreventDefault(e)\n\t\t\t\t\t\tif (!editor.inputs.keys.has('Comma')) {\n\t\t\t\t\t\t\tconst { x, y, z } = editor.inputs.currentScreenPoint\n\t\t\t\t\t\t\teditor.inputs.keys.add('Comma')\n\n\t\t\t\t\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\t\t\t\t\ttype: 'pointer',\n\t\t\t\t\t\t\t\tname: 'pointer_down',\n\t\t\t\t\t\t\t\tpoint: { x, y, z },\n\t\t\t\t\t\t\t\tshiftKey: e.shiftKey,\n\t\t\t\t\t\t\t\taltKey: e.altKey,\n\t\t\t\t\t\t\t\tctrlKey: e.metaKey || e.ctrlKey,\n\t\t\t\t\t\t\t\tpointerId: 0,\n\t\t\t\t\t\t\t\tbutton: 0,\n\t\t\t\t\t\t\t\tisPen: editor.instanceState.isPenMode,\n\t\t\t\t\t\t\t\ttarget: 'canvas',\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\teditor.dispatch(info)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'Escape': {\n\t\t\t\t\t// In certain browsers, pressing escape while in full screen mode\n\t\t\t\t\t// will exit full screen mode. We want to allow that, but not when\n\t\t\t\t\t// escape is being handled by the editor. When a user has an editing\n\t\t\t\t\t// shape, escape stops editing. When a user is using a tool, escape\n\t\t\t\t\t// returns to the select tool. When the user has selected shapes,\n\t\t\t\t\t// escape de-selects them. Only when the user's selection is empty\n\t\t\t\t\t// should we allow escape to do its normal thing.\n\n\t\t\t\t\tif (editor.editingShape || editor.selectedShapeIds.length > 0) {\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t}\n\n\t\t\t\t\t// Don't do anything if we open menus open\n\t\t\t\t\tif (editor.openMenus.length > 0) return\n\n\t\t\t\t\tif (!editor.inputs.keys.has('Escape')) {\n\t\t\t\t\t\teditor.inputs.keys.add('Escape')\n\n\t\t\t\t\t\teditor.cancel()\n\t\t\t\t\t\t// Pressing escape will focus the document.body,\n\t\t\t\t\t\t// which will cause the app to lose focus, which\n\t\t\t\t\t\t// will break additional shortcuts. We need to\n\t\t\t\t\t\t// refocus the container in order to keep these\n\t\t\t\t\t\t// shortcuts working.\n\t\t\t\t\t\tcontainer.focus()\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tif (isFocusingInput() || editor.isMenuOpen) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst info: TLKeyboardEventInfo = {\n\t\t\t\ttype: 'keyboard',\n\t\t\t\tname: e.repeat ? 'key_repeat' : 'key_down',\n\t\t\t\tkey: e.key,\n\t\t\t\tcode: e.code,\n\t\t\t\tshiftKey: e.shiftKey,\n\t\t\t\taltKey: e.altKey,\n\t\t\t\tctrlKey: e.metaKey || e.ctrlKey,\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tconst handleKeyUp = (e: KeyboardEvent) => {\n\t\t\tif ((e as any).isKilled) return\n\t\t\t;(e as any).isKilled = true\n\n\t\t\tif (isFocusingInput() || editor.isMenuOpen) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Use the , key to send pointer events\n\t\t\tif (e.key === ',') {\n\t\t\t\tif (document.activeElement?.ELEMENT_NODE) preventDefault(e)\n\t\t\t\tif (editor.inputs.keys.has(e.code)) {\n\t\t\t\t\tconst { x, y, z } = editor.inputs.currentScreenPoint\n\n\t\t\t\t\teditor.inputs.keys.delete(e.code)\n\n\t\t\t\t\tconst info: TLPointerEventInfo = {\n\t\t\t\t\t\ttype: 'pointer',\n\t\t\t\t\t\tname: 'pointer_up',\n\t\t\t\t\t\tpoint: { x, y, z },\n\t\t\t\t\t\tshiftKey: e.shiftKey,\n\t\t\t\t\t\taltKey: e.altKey,\n\t\t\t\t\t\tctrlKey: e.metaKey || e.ctrlKey,\n\t\t\t\t\t\tpointerId: 0,\n\t\t\t\t\t\tbutton: 0,\n\t\t\t\t\t\tisPen: editor.instanceState.isPenMode,\n\t\t\t\t\t\ttarget: 'canvas',\n\t\t\t\t\t}\n\t\t\t\t\teditor.dispatch(info)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst info: TLKeyboardEventInfo = {\n\t\t\t\ttype: 'keyboard',\n\t\t\t\tname: 'key_up',\n\t\t\t\tkey: e.key,\n\t\t\t\tcode: e.code,\n\t\t\t\tshiftKey: e.shiftKey,\n\t\t\t\taltKey: e.altKey,\n\t\t\t\tctrlKey: e.metaKey || e.ctrlKey,\n\t\t\t}\n\n\t\t\teditor.dispatch(info)\n\t\t}\n\n\t\tfunction handleTouchStart(e: TouchEvent) {\n\t\t\tif (container.contains(e.target as Node)) {\n\t\t\t\t// Center point of the touch area\n\t\t\t\tconst touchXPosition = e.touches[0].pageX\n\t\t\t\t// Size of the touch area\n\t\t\t\tconst touchXRadius = e.touches[0].radiusX || 0\n\n\t\t\t\t// We set a threshold (10px) on both sizes of the screen,\n\t\t\t\t// if the touch area overlaps with the screen edges\n\t\t\t\t// it's likely to trigger the navigation. We prevent the\n\t\t\t\t// touchstart event in that case.\n\t\t\t\tif (\n\t\t\t\t\ttouchXPosition - touchXRadius < 10 ||\n\t\t\t\t\ttouchXPosition + touchXRadius > editor.viewportScreenBounds.width - 10\n\t\t\t\t) {\n\t\t\t\t\tif ((e.target as HTMLElement)?.tagName === 'BUTTON') {\n\t\t\t\t\t\t// Force a click before bailing\n\t\t\t\t\t\t;(e.target as HTMLButtonElement)?.click()\n\t\t\t\t\t}\n\n\t\t\t\t\tpreventDefault(e)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Prevent wheel events that occur inside of the container\n\t\tconst handleWheel = (e: WheelEvent) => {\n\t\t\tif (container.contains(e.target as Node) && (e.ctrlKey || e.metaKey)) {\n\t\t\t\tpreventDefault(e)\n\t\t\t}\n\t\t}\n\n\t\tcontainer.addEventListener('touchstart', handleTouchStart, { passive: false })\n\n\t\tcontainer.addEventListener('wheel', handleWheel, { passive: false })\n\n\t\tdocument.addEventListener('gesturestart', preventDefault)\n\t\tdocument.addEventListener('gesturechange', preventDefault)\n\t\tdocument.addEventListener('gestureend', preventDefault)\n\n\t\tcontainer.addEventListener('keydown', handleKeyDown)\n\t\tcontainer.addEventListener('keyup', handleKeyUp)\n\n\t\treturn () => {\n\t\t\tcontainer.removeEventListener('touchstart', handleTouchStart)\n\n\t\t\tcontainer.removeEventListener('wheel', handleWheel)\n\n\t\t\tdocument.removeEventListener('gesturestart', preventDefault)\n\t\t\tdocument.removeEventListener('gesturechange', preventDefault)\n\t\t\tdocument.removeEventListener('gestureend', preventDefault)\n\n\t\t\tcontainer.removeEventListener('keydown', handleKeyDown)\n\t\t\tcontainer.removeEventListener('keyup', handleKeyUp)\n\t\t}\n\t}, [editor, container, isAppFocused])\n}\n\nconst INPUTS = ['input', 'select', 'button', 'textarea']\n\nfunction isFocusingInput() {\n\tconst { activeElement } = document\n\n\tif (\n\t\tactiveElement &&\n\t\t(activeElement.getAttribute('contenteditable') ||\n\t\t\tINPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1)\n\t) {\n\t\treturn true\n\t}\n\n\treturn false\n}\n"],
  "mappings": "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",
  "names": ["info"]
}
