{
  "version": 3,
  "sources": ["../../../src/lib/primitives/Vec2d.ts"],
  "sourcesContent": ["import { Vec2dModel } from '@tldraw/tlschema'\nimport { EASINGS } from './easings'\n\n/** @public */\nexport type VecLike = Vec2d | Vec2dModel\n\n/** @public */\nexport class Vec2d {\n\tconstructor(public x = 0, public y = 0, public z = 1) {}\n\n\tget pressure() {\n\t\treturn this.z\n\t}\n\n\tset(x = this.x, y = this.y, z = this.z) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\tsetTo({ x = 0, y = 0, z = 1 }: VecLike) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\trot(r: number) {\n\t\tif (r === 0) return this\n\t\tconst { x, y } = this\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = x * c - y * s\n\t\tthis.y = x * s + y * c\n\t\treturn this\n\t}\n\n\trotWith(C: VecLike, r: number) {\n\t\tif (r === 0) return this\n\t\tconst x = this.x - C.x\n\t\tconst y = this.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = C.x + (x * c - y * s)\n\t\tthis.y = C.y + (x * s + y * c)\n\t\treturn this\n\t}\n\n\tclone(): Vec2d {\n\t\tconst { x, y, z } = this\n\t\treturn new Vec2d(x, y, z)\n\t}\n\n\tsub(V: VecLike) {\n\t\tthis.x -= V.x\n\t\tthis.y -= V.y\n\t\treturn this\n\t}\n\n\tsubXY(x: number, y: number) {\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t\treturn this\n\t}\n\n\tsubScalar(n: number) {\n\t\tthis.x -= n\n\t\tthis.y -= n\n\t\t// this.z -= n\n\n\t\treturn this\n\t}\n\n\tadd(V: VecLike) {\n\t\tthis.x += V.x\n\t\tthis.y += V.y\n\t\treturn this\n\t}\n\n\taddXY(x: number, y: number) {\n\t\tthis.x += x\n\t\tthis.y += y\n\t\treturn this\n\t}\n\n\taddScalar(n: number) {\n\t\tthis.x += n\n\t\tthis.y += n\n\t\t// this.z += n\n\n\t\treturn this\n\t}\n\n\tclamp(min: number, max?: number) {\n\t\tthis.x = Math.max(this.x, min)\n\t\tthis.y = Math.max(this.y, min)\n\t\tif (max !== undefined) {\n\t\t\tthis.x = Math.min(this.x, max)\n\t\t\tthis.y = Math.min(this.y, max)\n\t\t}\n\t\treturn this\n\t}\n\n\tdiv(t: number) {\n\t\tthis.x /= t\n\t\tthis.y /= t\n\t\t// this.z /= t\n\t\treturn this\n\t}\n\n\tdivV(V: VecLike) {\n\t\tthis.x /= V.x\n\t\tthis.y /= V.y\n\t\t// this.z /= V.z\n\t\treturn this\n\t}\n\n\tmul(t: number) {\n\t\tthis.x *= t\n\t\tthis.y *= t\n\t\t// this.z *= t\n\t\treturn this\n\t}\n\n\tmulV(V: VecLike) {\n\t\tthis.x *= V.x\n\t\tthis.y *= V.y\n\t\t// this.z *= V.z\n\t\treturn this\n\t}\n\n\tabs() {\n\t\tthis.x = Math.abs(this.x)\n\t\tthis.y = Math.abs(this.y)\n\t\treturn this\n\t}\n\n\tnudge(B: VecLike, distance: number) {\n\t\tconst tan = Vec2d.Tan(B, this)\n\t\treturn this.add(tan.mul(distance))\n\t}\n\n\tneg() {\n\t\tthis.x *= -1\n\t\tthis.y *= -1\n\t\t// this.z *= -1\n\t\treturn this\n\t}\n\n\tcross(V: VecLike) {\n\t\tthis.x = this.y * V.z! - this.z * V.y\n\t\tthis.y = this.z * V.x - this.x * V.z!\n\t\t// this.z = this.x * V.y - this.y * V.x\n\t\treturn this\n\t}\n\n\tdpr(V: VecLike): number {\n\t\treturn Vec2d.Dpr(this, V)\n\t}\n\n\tcpr(V: VecLike) {\n\t\treturn Vec2d.Cpr(this, V)\n\t}\n\n\tlen2(): number {\n\t\treturn Vec2d.Len2(this)\n\t}\n\n\tlen(): number {\n\t\treturn Vec2d.Len(this)\n\t}\n\n\tpry(V: VecLike): number {\n\t\treturn Vec2d.Pry(this, V)\n\t}\n\n\tper() {\n\t\tconst { x, y } = this\n\t\tthis.x = y\n\t\tthis.y = -x\n\t\treturn this\n\t}\n\n\tuni() {\n\t\treturn Vec2d.Uni(this)\n\t}\n\n\ttan(V: VecLike): Vec2d {\n\t\treturn Vec2d.Tan(this, V)\n\t}\n\n\tdist(V: VecLike): number {\n\t\treturn Vec2d.Dist(this, V)\n\t}\n\n\tdistanceToLineSegment(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.DistanceToLineSegment(A, B, this)\n\t}\n\n\tslope(B: VecLike): number {\n\t\treturn Vec2d.Slope(this, B)\n\t}\n\n\tsnapToGrid(gridSize: number) {\n\t\tthis.x = Math.round(this.x / gridSize) * gridSize\n\t\tthis.y = Math.round(this.y / gridSize) * gridSize\n\t\treturn this\n\t}\n\n\tangle(B: VecLike): number {\n\t\treturn Vec2d.Angle(this, B)\n\t}\n\n\ttoAngle() {\n\t\treturn Vec2d.ToAngle(this)\n\t}\n\n\tlrp(B: VecLike, t: number): Vec2d {\n\t\tthis.x = this.x + (B.x - this.x) * t\n\t\tthis.y = this.y + (B.y - this.y) * t\n\t\treturn this\n\t}\n\n\tequals(B: VecLike) {\n\t\treturn Vec2d.Equals(this, B)\n\t}\n\n\tequalsXY(x: number, y: number) {\n\t\treturn Vec2d.EqualsXY(this, x, y)\n\t}\n\n\tnorm() {\n\t\tconst l = this.len()\n\t\tthis.x = l === 0 ? 0 : this.x / l\n\t\tthis.y = l === 0 ? 0 : this.y / l\n\t\treturn this\n\t}\n\n\ttoFixed() {\n\t\treturn Vec2d.ToFixed(this)\n\t}\n\n\ttoString() {\n\t\treturn Vec2d.ToString(Vec2d.ToFixed(this))\n\t}\n\n\ttoJson(): Vec2dModel {\n\t\treturn Vec2d.ToJson(this)\n\t}\n\n\ttoArray(): number[] {\n\t\treturn Vec2d.ToArray(this)\n\t}\n\n\tstatic Add(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x + B.x, A.y + B.y)\n\t}\n\n\tstatic AddXY(A: VecLike, x: number, y: number): Vec2d {\n\t\treturn new Vec2d(A.x + x, A.y + y)\n\t}\n\n\tstatic Sub(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x - B.x, A.y - B.y)\n\t}\n\n\tstatic SubXY(A: VecLike, x: number, y: number): Vec2d {\n\t\treturn new Vec2d(A.x - x, A.y - y)\n\t}\n\n\tstatic AddScalar(A: VecLike, n: number): Vec2d {\n\t\treturn new Vec2d(A.x + n, A.y + n)\n\t}\n\n\tstatic SubScalar(A: VecLike, n: number): Vec2d {\n\t\treturn new Vec2d(A.x - n, A.y - n)\n\t}\n\n\tstatic Div(A: VecLike, t: number): Vec2d {\n\t\treturn new Vec2d(A.x / t, A.y / t)\n\t}\n\n\tstatic Mul(A: VecLike, t: number): Vec2d {\n\t\treturn new Vec2d(A.x * t, A.y * t)\n\t}\n\n\tstatic DivV(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x / B.x, A.y / B.y)\n\t}\n\n\tstatic MulV(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(A.x * B.x, A.y * B.y)\n\t}\n\n\tstatic Neg(A: VecLike): Vec2d {\n\t\treturn new Vec2d(-A.x, -A.y)\n\t}\n\n\tstatic Per(A: VecLike): Vec2d {\n\t\treturn new Vec2d(A.y, -A.x)\n\t}\n\n\tstatic Dist2(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.Sub(A, B).len2()\n\t}\n\n\tstatic Abs(A: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.abs(A.x), Math.abs(A.y))\n\t}\n\n\tstatic Dist(A: VecLike, B: VecLike): number {\n\t\treturn Math.hypot(A.y - B.y, A.x - B.x)\n\t}\n\n\tstatic Dpr(A: VecLike, B: VecLike): number {\n\t\treturn A.x * B.x + A.y * B.y\n\t}\n\n\tstatic Cross(A: VecLike, V: VecLike) {\n\t\treturn new Vec2d(\n\t\t\tA.y * V.z! - A.z! * V.y,\n\t\t\tA.z! * V.x - A.x * V.z!\n\t\t\t// A.z = A.x * V.y - A.y * V.x\n\t\t)\n\t}\n\n\tstatic Cpr(A: VecLike, B: VecLike) {\n\t\treturn A.x * B.y - B.x * A.y\n\t}\n\n\tstatic Len2(A: VecLike): number {\n\t\treturn A.x * A.x + A.y * A.y\n\t}\n\n\tstatic Len(A: VecLike): number {\n\t\treturn Math.hypot(A.x, A.y)\n\t}\n\n\tstatic Pry(A: VecLike, B: VecLike): number {\n\t\treturn Vec2d.Dpr(A, B) / Vec2d.Len(B)\n\t}\n\n\tstatic Uni(A: VecLike) {\n\t\treturn Vec2d.Div(A, Vec2d.Len(A))\n\t}\n\n\tstatic Tan(A: VecLike, B: VecLike): Vec2d {\n\t\treturn Vec2d.Uni(Vec2d.Sub(A, B))\n\t}\n\n\tstatic Min(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.min(A.x, B.x), Math.min(A.y, B.y))\n\t}\n\n\tstatic Max(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d(Math.max(A.x, B.x), Math.max(A.y, B.y))\n\t}\n\n\tstatic From({ x, y, z = 1 }: Vec2dModel) {\n\t\treturn new Vec2d(x, y, z)\n\t}\n\n\tstatic FromArray(v: number[]): Vec2d {\n\t\treturn new Vec2d(v[0], v[1])\n\t}\n\n\tstatic Rot(A: VecLike, r = 0): Vec2d {\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec2d(A.x * c - A.y * s, A.x * s + A.y * c)\n\t}\n\n\tstatic RotWith(A: VecLike, C: VecLike, r: number): Vec2d {\n\t\tconst x = A.x - C.x\n\t\tconst y = A.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec2d(C.x + (x * c - y * s), C.y + (x * s + y * c))\n\t}\n\n\t/**\n\t * Get the nearest point on a line with a known unit vector that passes through point A\n\t *\n\t * ```ts\n\t * Vec.nearestPointOnLineThroughPoint(A, u, Point)\n\t * ```\n\t *\n\t * @param A - Any point on the line\n\t * @param u - The unit vector for the line.\n\t * @param P - A point not on the line to test.\n\t */\n\tstatic NearestPointOnLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): Vec2d {\n\t\treturn Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)).add(A)\n\t}\n\n\tstatic NearestPointOnLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): Vec2d {\n\t\tconst u = Vec2d.Tan(B, A)\n\t\tconst C = Vec2d.Add(A, Vec2d.Mul(u, Vec2d.Sub(P, A).pry(u)))\n\n\t\t// todo: fix error P is B or A, which leads to a NaN value\n\n\t\tif (clamp) {\n\t\t\tif (C.x < Math.min(A.x, B.x)) return Vec2d.Cast(A.x < B.x ? A : B)\n\t\t\tif (C.x > Math.max(A.x, B.x)) return Vec2d.Cast(A.x > B.x ? A : B)\n\t\t\tif (C.y < Math.min(A.y, B.y)) return Vec2d.Cast(A.y < B.y ? A : B)\n\t\t\tif (C.y > Math.max(A.y, B.y)) return Vec2d.Cast(A.y > B.y ? A : B)\n\t\t}\n\n\t\treturn C\n\t}\n\n\tstatic DistanceToLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): number {\n\t\treturn Vec2d.Dist(P, Vec2d.NearestPointOnLineThroughPoint(A, u, P))\n\t}\n\n\tstatic DistanceToLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): number {\n\t\treturn Vec2d.Dist(P, Vec2d.NearestPointOnLineSegment(A, B, P, clamp))\n\t}\n\n\tstatic Snap(A: VecLike, step = 1) {\n\t\treturn new Vec2d(Math.round(A.x / step) * step, Math.round(A.y / step) * step)\n\t}\n\n\tstatic Cast(A: VecLike): Vec2d {\n\t\tif (A instanceof Vec2d) return A\n\t\treturn Vec2d.From(A)\n\t}\n\n\tstatic Slope(A: VecLike, B: VecLike): number {\n\t\tif (A.x === B.y) return NaN\n\t\treturn (A.y - B.y) / (A.x - B.x)\n\t}\n\n\tstatic Angle(A: VecLike, B: VecLike): number {\n\t\treturn Math.atan2(B.y - A.y, B.x - A.x)\n\t}\n\n\tstatic Lrp(A: VecLike, B: VecLike, t: number): Vec2d {\n\t\treturn Vec2d.Sub(B, A).mul(t).add(A)\n\t}\n\n\tstatic Med(A: VecLike, B: VecLike): Vec2d {\n\t\treturn new Vec2d((A.x + B.x) / 2, (A.y + B.y) / 2)\n\t}\n\n\tstatic Equals(A: VecLike, B: VecLike): boolean {\n\t\treturn Math.abs(A.x - B.x) < 0.0001 && Math.abs(A.y - B.y) < 0.0001\n\t}\n\n\tstatic EqualsXY(A: VecLike, x: number, y: number): boolean {\n\t\treturn A.x === x && A.y === y\n\t}\n\n\tstatic Clockwise(A: VecLike, B: VecLike, C: VecLike): boolean {\n\t\treturn (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0\n\t}\n\n\tstatic Rescale(A: VecLike, n: number) {\n\t\tconst l = Vec2d.Len(A)\n\t\treturn new Vec2d((n * A.x) / l, (n * A.y) / l)\n\t}\n\n\tstatic ScaleWithOrigin(A: VecLike, scale: number, origin: VecLike) {\n\t\treturn Vec2d.Sub(A, origin).mul(scale).add(origin)\n\t}\n\n\tstatic ToFixed(A: VecLike, n = 2) {\n\t\treturn new Vec2d(+A.x.toFixed(n), +A.y.toFixed(n), +A.z!.toFixed(n))\n\t}\n\n\tstatic Nudge(A: VecLike, B: VecLike, distance: number) {\n\t\treturn Vec2d.Add(A, Vec2d.Tan(B, A).mul(distance))\n\t}\n\n\tstatic ToString(A: VecLike) {\n\t\treturn `${A.x}, ${A.y}`\n\t}\n\n\tstatic ToAngle(A: VecLike) {\n\t\tlet r = Math.atan2(A.y, A.x)\n\t\tif (r < 0) r += Math.PI * 2\n\n\t\treturn r\n\t}\n\n\tstatic FromAngle(r: number, length = 1) {\n\t\treturn new Vec2d(Math.cos(r) * length, Math.sin(r) * length)\n\t}\n\n\tstatic ToArray(A: VecLike) {\n\t\treturn [A.x, A.y, A.z!]\n\t}\n\n\tstatic ToJson(A: VecLike) {\n\t\tconst { x, y, z } = A\n\t\treturn { x, y, z }\n\t}\n\n\tstatic Average(arr: VecLike[]) {\n\t\tconst len = arr.length\n\t\tconst avg = new Vec2d(0, 0)\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tavg.add(arr[i])\n\t\t}\n\t\treturn avg.div(len)\n\t}\n\n\tstatic Clamp(A: Vec2d, min: number, max?: number) {\n\t\tif (max === undefined) {\n\t\t\treturn new Vec2d(Math.min(Math.max(A.x, min)), Math.min(Math.max(A.y, min)))\n\t\t}\n\n\t\treturn new Vec2d(Math.min(Math.max(A.x, min), max), Math.min(Math.max(A.y, min), max))\n\t}\n\n\t/**\n\t * Get an array of points (with simulated pressure) between two points.\n\t *\n\t * @param A - The first point.\n\t * @param B - The second point.\n\t * @param steps - The number of points to return.\n\t */\n\tstatic PointsBetween(A: Vec2dModel, B: Vec2dModel, steps = 6): Vec2d[] {\n\t\tconst results: Vec2d[] = []\n\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\tconst t = EASINGS.easeInQuad(i / (steps - 1))\n\t\t\tconst point = Vec2d.Lrp(A, B, t)\n\t\t\tpoint.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t)) * 0.65)\n\t\t\tresults.push(point)\n\t\t}\n\n\t\treturn results\n\t}\n\n\tstatic SnapToGrid(A: VecLike, gridSize = 8) {\n\t\treturn new Vec2d(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize)\n\t}\n}\n\nconst ease = (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t)\n"],
  "mappings": "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",
  "names": []
}
