{
  "version": 3,
  "sources": ["../../../../src/lib/primitives/geometry/CubicSpline2d.ts"],
  "sourcesContent": ["import { Vec2d } from '../Vec2d'\nimport { CubicBezier2d } from './CubicBezier2d'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class CubicSpline2d extends Geometry2d {\n\tpoints: Vec2d[]\n\n\tconstructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & { points: Vec2d[] }) {\n\t\tsuper({ ...config, isClosed: false, isFilled: false })\n\t\tconst { points } = config\n\n\t\tthis.points = points\n\t}\n\n\t_segments?: CubicBezier2d[]\n\n\tget segments() {\n\t\tif (!this._segments) {\n\t\t\tthis._segments = []\n\t\t\tconst { points } = this\n\n\t\t\tconst len = points.length\n\t\t\tconst last = len - 2\n\t\t\tconst k = 1.25\n\n\t\t\tfor (let i = 0; i < len - 1; i++) {\n\t\t\t\tconst p0 = i === 0 ? points[0] : points[i - 1]\n\t\t\t\tconst p1 = points[i]\n\t\t\t\tconst p2 = points[i + 1]\n\t\t\t\tconst p3 = i === last ? p2 : points[i + 2]\n\t\t\t\tconst start = p1,\n\t\t\t\t\tcp1 =\n\t\t\t\t\t\ti === 0\n\t\t\t\t\t\t\t? p0\n\t\t\t\t\t\t\t: new Vec2d(p1.x + ((p2.x - p0.x) / 6) * k, p1.y + ((p2.y - p0.y) / 6) * k),\n\t\t\t\t\tcp2 =\n\t\t\t\t\t\ti === last\n\t\t\t\t\t\t\t? p2\n\t\t\t\t\t\t\t: new Vec2d(p2.x - ((p3.x - p1.x) / 6) * k, p2.y - ((p3.y - p1.y) / 6) * k),\n\t\t\t\t\tend = p2\n\n\t\t\t\tthis._segments.push(new CubicBezier2d({ start, cp1, cp2, end }))\n\t\t\t}\n\t\t}\n\n\t\treturn this._segments\n\t}\n\n\t_length?: number\n\n\tget length() {\n\t\tif (!this._length) {\n\t\t\tthis._length = this.segments.reduce((acc, segment) => acc + segment.length, 0)\n\t\t}\n\t\treturn this._length\n\t}\n\n\tgetVertices() {\n\t\tconst vertices = this.segments.reduce((acc, segment) => {\n\t\t\treturn acc.concat(segment.vertices)\n\t\t}, [] as Vec2d[])\n\t\tvertices.push(this.points[this.points.length - 1])\n\t\treturn vertices\n\t}\n\n\tnearestPoint(A: Vec2d): Vec2d {\n\t\tlet nearest: Vec2d | undefined\n\t\tlet dist = Infinity\n\t\tfor (const segment of this.segments) {\n\t\t\tconst p = segment.nearestPoint(A)\n\t\t\tconst d = p.dist(A)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: Vec2d, B: Vec2d, zoom: number): boolean {\n\t\treturn this.segments.some((segment) => segment.hitTestLineSegment(A, B, zoom))\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,aAAa;AACtB,SAAS,qBAAqB;AAC9B,SAAS,kBAAqC;AAGvC,MAAM,sBAAsB,WAAW;AAAA,EAC7C;AAAA,EAEA,YAAY,QAAgF;AAC3F,UAAM,EAAE,GAAG,QAAQ,UAAU,OAAO,UAAU,MAAM,CAAC;AACrD,UAAM,EAAE,OAAO,IAAI;AAEnB,SAAK,SAAS;AAAA,EACf;AAAA,EAEA;AAAA,EAEA,IAAI,WAAW;AACd,QAAI,CAAC,KAAK,WAAW;AACpB,WAAK,YAAY,CAAC;AAClB,YAAM,EAAE,OAAO,IAAI;AAEnB,YAAM,MAAM,OAAO;AACnB,YAAM,OAAO,MAAM;AACnB,YAAM,IAAI;AAEV,eAAS,IAAI,GAAG,IAAI,MAAM,GAAG,KAAK;AACjC,cAAM,KAAK,MAAM,IAAI,OAAO,CAAC,IAAI,OAAO,IAAI,CAAC;AAC7C,cAAM,KAAK,OAAO,CAAC;AACnB,cAAM,KAAK,OAAO,IAAI,CAAC;AACvB,cAAM,KAAK,MAAM,OAAO,KAAK,OAAO,IAAI,CAAC;AACzC,cAAM,QAAQ,IACb,MACC,MAAM,IACH,KACA,IAAI,MAAM,GAAG,KAAM,GAAG,IAAI,GAAG,KAAK,IAAK,GAAG,GAAG,KAAM,GAAG,IAAI,GAAG,KAAK,IAAK,CAAC,GAC5E,MACC,MAAM,OACH,KACA,IAAI,MAAM,GAAG,KAAM,GAAG,IAAI,GAAG,KAAK,IAAK,GAAG,GAAG,KAAM,GAAG,IAAI,GAAG,KAAK,IAAK,CAAC,GAC5E,MAAM;AAEP,aAAK,UAAU,KAAK,IAAI,cAAc,EAAE,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC;AAAA,MAChE;AAAA,IACD;AAEA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA;AAAA,EAEA,IAAI,SAAS;AACZ,QAAI,CAAC,KAAK,SAAS;AAClB,WAAK,UAAU,KAAK,SAAS,OAAO,CAAC,KAAK,YAAY,MAAM,QAAQ,QAAQ,CAAC;AAAA,IAC9E;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,cAAc;AACb,UAAM,WAAW,KAAK,SAAS,OAAO,CAAC,KAAK,YAAY;AACvD,aAAO,IAAI,OAAO,QAAQ,QAAQ;AAAA,IACnC,GAAG,CAAC,CAAY;AAChB,aAAS,KAAK,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,CAAC;AACjD,WAAO;AAAA,EACR;AAAA,EAEA,aAAa,GAAiB;AAC7B,QAAI;AACJ,QAAI,OAAO;AACX,eAAW,WAAW,KAAK,UAAU;AACpC,YAAM,IAAI,QAAQ,aAAa,CAAC;AAChC,YAAM,IAAI,EAAE,KAAK,CAAC;AAClB,UAAI,IAAI,MAAM;AACb,kBAAU;AACV,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,CAAC;AAAS,YAAM,MAAM,yBAAyB;AACnD,WAAO;AAAA,EACR;AAAA,EAEA,mBAAmB,GAAU,GAAU,MAAuB;AAC7D,WAAO,KAAK,SAAS,KAAK,CAAC,YAAY,QAAQ,mBAAmB,GAAG,GAAG,IAAI,CAAC;AAAA,EAC9E;AACD;",
  "names": []
}
