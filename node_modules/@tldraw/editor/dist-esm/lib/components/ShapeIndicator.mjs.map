{
  "version": 3,
  "sources": ["../../../src/lib/components/ShapeIndicator.tsx"],
  "sourcesContent": ["import { useStateTracking, useValue } from '@tldraw/state'\nimport { TLShape, TLShapeId } from '@tldraw/tlschema'\nimport classNames from 'classnames'\nimport * as React from 'react'\nimport { useEditor } from '../..'\nimport type { Editor } from '../editor/Editor'\nimport { ShapeUtil } from '../editor/shapes/ShapeUtil'\nimport { useEditorComponents } from '../hooks/useEditorComponents'\nimport { OptionalErrorBoundary } from './ErrorBoundary'\n\nclass ShapeWithPropsEquality {\n\tconstructor(public shape: TLShape | undefined) {}\n\tequals(other: ShapeWithPropsEquality) {\n\t\treturn (\n\t\t\tthis.shape?.isLocked === other?.shape?.isLocked &&\n\t\t\tthis.shape?.props === other?.shape?.props &&\n\t\t\tthis.shape?.meta === other?.shape?.meta\n\t\t)\n\t}\n}\n\n// need an extra layer of indirection here to allow hooks to be used inside the indicator render\nconst EvenInnererIndicator = ({ shape, util }: { shape: TLShape; util: ShapeUtil<any> }) => {\n\treturn useStateTracking('Indicator:' + shape.type, () => util.indicator(shape))\n}\n\nexport const InnerIndicator = ({ editor, id }: { editor: Editor; id: TLShapeId }) => {\n\tconst shape = useValue('shape', () => new ShapeWithPropsEquality(editor.store.get(id)), [\n\t\teditor,\n\t\tid,\n\t])\n\n\tconst { ShapeIndicatorErrorFallback } = useEditorComponents()\n\n\tif (!shape.shape || shape.shape.isLocked) return null\n\n\treturn (\n\t\t<OptionalErrorBoundary\n\t\t\tfallback={ShapeIndicatorErrorFallback}\n\t\t\tonError={(error) =>\n\t\t\t\teditor.annotateError(error, { origin: 'react.shapeIndicator', willCrashApp: false })\n\t\t\t}\n\t\t>\n\t\t\t<EvenInnererIndicator\n\t\t\t\tkey={shape.shape.id}\n\t\t\t\tshape={shape.shape}\n\t\t\t\tutil={editor.getShapeUtil(shape.shape)}\n\t\t\t/>\n\t\t</OptionalErrorBoundary>\n\t)\n}\n\n/** @public */\nexport type TLShapeIndicatorComponent = React.ComponentType<{\n\tid: TLShapeId\n\tcolor?: string | undefined\n\topacity?: number\n\tclassName?: string\n}>\n\nconst _ShapeIndicator: TLShapeIndicatorComponent = ({ id, className, color, opacity }) => {\n\tconst editor = useEditor()\n\n\tconst transform = useValue(\n\t\t'transform',\n\t\t() => {\n\t\t\tconst pageTransform = editor.getShapePageTransform(id)\n\t\t\tif (!pageTransform) return ''\n\t\t\treturn pageTransform.toCssString()\n\t\t},\n\t\t[editor, id]\n\t)\n\n\treturn (\n\t\t<svg className={classNames('tl-overlays__item', className)}>\n\t\t\t<g\n\t\t\t\tclassName=\"tl-shape-indicator\"\n\t\t\t\ttransform={transform}\n\t\t\t\tstroke={color ?? 'var(--color-selected)'}\n\t\t\t\topacity={opacity}\n\t\t\t>\n\t\t\t\t<InnerIndicator editor={editor} id={id} />\n\t\t\t</g>\n\t\t</svg>\n\t)\n}\n\n/** @public */\nexport const ShapeIndicator = React.memo(_ShapeIndicator)\n"],
  "mappings": "AA2CG;AA3CH,SAAS,kBAAkB,gBAAgB;AAE3C,OAAO,gBAAgB;AACvB,YAAY,WAAW;AACvB,SAAS,iBAAiB;AAG1B,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AAEtC,MAAM,uBAAuB;AAAA,EAC5B,YAAmB,OAA4B;AAA5B;AAAA,EAA6B;AAAA,EAChD,OAAO,OAA+B;AACrC,WACC,KAAK,OAAO,aAAa,OAAO,OAAO,YACvC,KAAK,OAAO,UAAU,OAAO,OAAO,SACpC,KAAK,OAAO,SAAS,OAAO,OAAO;AAAA,EAErC;AACD;AAGA,MAAM,uBAAuB,CAAC,EAAE,OAAO,KAAK,MAAgD;AAC3F,SAAO,iBAAiB,eAAe,MAAM,MAAM,MAAM,KAAK,UAAU,KAAK,CAAC;AAC/E;AAEO,MAAM,iBAAiB,CAAC,EAAE,QAAQ,GAAG,MAAyC;AACpF,QAAM,QAAQ,SAAS,SAAS,MAAM,IAAI,uBAAuB,OAAO,MAAM,IAAI,EAAE,CAAC,GAAG;AAAA,IACvF;AAAA,IACA;AAAA,EACD,CAAC;AAED,QAAM,EAAE,4BAA4B,IAAI,oBAAoB;AAE5D,MAAI,CAAC,MAAM,SAAS,MAAM,MAAM;AAAU,WAAO;AAEjD,SACC;AAAA,IAAC;AAAA;AAAA,MACA,UAAU;AAAA,MACV,SAAS,CAAC,UACT,OAAO,cAAc,OAAO,EAAE,QAAQ,wBAAwB,cAAc,MAAM,CAAC;AAAA,MAGpF;AAAA,QAAC;AAAA;AAAA,UAEA,OAAO,MAAM;AAAA,UACb,MAAM,OAAO,aAAa,MAAM,KAAK;AAAA;AAAA,QAFhC,MAAM,MAAM;AAAA,MAGlB;AAAA;AAAA,EACD;AAEF;AAUA,MAAM,kBAA6C,CAAC,EAAE,IAAI,WAAW,OAAO,QAAQ,MAAM;AACzF,QAAM,SAAS,UAAU;AAEzB,QAAM,YAAY;AAAA,IACjB;AAAA,IACA,MAAM;AACL,YAAM,gBAAgB,OAAO,sBAAsB,EAAE;AACrD,UAAI,CAAC;AAAe,eAAO;AAC3B,aAAO,cAAc,YAAY;AAAA,IAClC;AAAA,IACA,CAAC,QAAQ,EAAE;AAAA,EACZ;AAEA,SACC,oBAAC,SAAI,WAAW,WAAW,qBAAqB,SAAS,GACxD;AAAA,IAAC;AAAA;AAAA,MACA,WAAU;AAAA,MACV;AAAA,MACA,QAAQ,SAAS;AAAA,MACjB;AAAA,MAEA,8BAAC,kBAAe,QAAgB,IAAQ;AAAA;AAAA,EACzC,GACD;AAEF;AAGO,MAAM,iBAAiB,MAAM,KAAK,eAAe;",
  "names": []
}
