{
  "version": 3,
  "sources": ["../../src/lib/Tldraw.tsx"],
  "sourcesContent": ["import {\n\tCanvas,\n\tEditor,\n\tErrorScreen,\n\tLoadingScreen,\n\tRecursivePartial,\n\tStoreSnapshot,\n\tTLOnMountHandler,\n\tTLRecord,\n\tTLStore,\n\tTLStoreWithStatus,\n\tTldrawEditor,\n\tTldrawEditorBaseProps,\n\tTldrawEditorProps,\n\tassert,\n\tuseEditor,\n} from '@tldraw/editor'\nimport { useCallback, useDebugValue, useLayoutEffect, useMemo, useRef } from 'react'\nimport { TldrawHandles } from './canvas/TldrawHandles'\nimport { TldrawHoveredShapeIndicator } from './canvas/TldrawHoveredShapeIndicator'\nimport { TldrawScribble } from './canvas/TldrawScribble'\nimport { TldrawSelectionBackground } from './canvas/TldrawSelectionBackground'\nimport { TldrawSelectionForeground } from './canvas/TldrawSelectionForeground'\nimport {\n\tTLExternalContentProps,\n\tregisterDefaultExternalContentHandlers,\n} from './defaultExternalContentHandlers'\nimport { defaultShapeTools } from './defaultShapeTools'\nimport { defaultShapeUtils } from './defaultShapeUtils'\nimport { registerDefaultSideEffects } from './defaultSideEffects'\nimport { defaultTools } from './defaultTools'\nimport { TldrawUi, TldrawUiProps } from './ui/TldrawUi'\nimport { ContextMenu } from './ui/components/ContextMenu'\nimport { TLEditorAssetUrls, useDefaultEditorAssetsWithOverrides } from './utils/assetUrls'\nimport { usePreloadAssets } from './utils/usePreloadAssets'\n\n/** @public */\nexport function Tldraw(\n\tprops: TldrawEditorBaseProps &\n\t\t(\n\t\t\t| {\n\t\t\t\t\tstore: TLStore | TLStoreWithStatus\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\tstore?: undefined\n\t\t\t\t\tpersistenceKey?: string\n\t\t\t\t\tsessionId?: string\n\t\t\t\t\tdefaultName?: string\n\t\t\t\t\t/**\n\t\t\t\t\t * A snapshot to load for the store's initial data / schema.\n\t\t\t\t\t */\n\t\t\t\t\tsnapshot?: StoreSnapshot<TLRecord>\n\t\t\t  }\n\t\t) &\n\t\tTldrawUiProps &\n\t\tPartial<TLExternalContentProps> & {\n\t\t\t/**\n\t\t\t * Urls for the editor to find fonts and other assets.\n\t\t\t */\n\t\t\tassetUrls?: RecursivePartial<TLEditorAssetUrls>\n\t\t}\n) {\n\tconst {\n\t\tchildren,\n\t\tmaxImageDimension,\n\t\tmaxAssetSize,\n\t\tacceptedImageMimeTypes,\n\t\tacceptedVideoMimeTypes,\n\t\tonMount,\n\t\t...rest\n\t} = props\n\n\tconst withDefaults: TldrawEditorProps = {\n\t\tinitialState: 'select',\n\t\t...rest,\n\t\tcomponents: useMemo(\n\t\t\t() => ({\n\t\t\t\tScribble: TldrawScribble,\n\t\t\t\tCollaboratorScribble: TldrawScribble,\n\t\t\t\tSelectionForeground: TldrawSelectionForeground,\n\t\t\t\tSelectionBackground: TldrawSelectionBackground,\n\t\t\t\tHandles: TldrawHandles,\n\t\t\t\tHoveredShapeIndicator: TldrawHoveredShapeIndicator,\n\t\t\t\t...rest.components,\n\t\t\t}),\n\t\t\t[rest.components]\n\t\t),\n\t\tshapeUtils: useMemo(\n\t\t\t() => [...defaultShapeUtils, ...(rest.shapeUtils ?? [])],\n\t\t\t[rest.shapeUtils]\n\t\t),\n\t\ttools: useMemo(\n\t\t\t() => [...defaultTools, ...defaultShapeTools, ...(rest.tools ?? [])],\n\t\t\t[rest.tools]\n\t\t),\n\t}\n\n\tconst assets = useDefaultEditorAssetsWithOverrides(rest.assetUrls)\n\n\tconst { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets)\n\n\tif (preloadingError) {\n\t\treturn <ErrorScreen>Could not load assets. Please refresh the page.</ErrorScreen>\n\t}\n\n\tif (!preloadingComplete) {\n\t\treturn <LoadingScreen>Loading assets...</LoadingScreen>\n\t}\n\n\treturn (\n\t\t<TldrawEditor {...withDefaults}>\n\t\t\t<TldrawUi {...withDefaults}>\n\t\t\t\t<ContextMenu>\n\t\t\t\t\t<Canvas />\n\t\t\t\t</ContextMenu>\n\t\t\t\t<InsideOfEditorContext\n\t\t\t\t\tmaxImageDimension={maxImageDimension}\n\t\t\t\t\tmaxAssetSize={maxAssetSize}\n\t\t\t\t\tacceptedImageMimeTypes={acceptedImageMimeTypes}\n\t\t\t\t\tacceptedVideoMimeTypes={acceptedVideoMimeTypes}\n\t\t\t\t\tonMount={onMount}\n\t\t\t\t/>\n\t\t\t\t{children}\n\t\t\t</TldrawUi>\n\t\t</TldrawEditor>\n\t)\n}\n\n// We put these hooks into a component here so that they can run inside of the context provided by TldrawEditor.\nfunction InsideOfEditorContext({\n\tmaxImageDimension = 1000,\n\tmaxAssetSize = 10 * 1024 * 1024, // 10mb\n\tacceptedImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml'],\n\tacceptedVideoMimeTypes = ['video/mp4', 'video/quicktime'],\n\tonMount,\n}: Partial<TLExternalContentProps & { onMount: TLOnMountHandler }>) {\n\tconst editor = useEditor()\n\n\tconst onMountEvent = useEvent((editor: Editor) => {\n\t\tconst unsubs: (void | (() => void) | undefined)[] = []\n\n\t\tunsubs.push(...registerDefaultSideEffects(editor))\n\n\t\t// for content handling, first we register the default handlers...\n\t\tregisterDefaultExternalContentHandlers(editor, {\n\t\t\tmaxImageDimension,\n\t\t\tmaxAssetSize,\n\t\t\tacceptedImageMimeTypes,\n\t\t\tacceptedVideoMimeTypes,\n\t\t})\n\n\t\t// ...then we run the onMount prop, which may override the above\n\t\tunsubs.push(onMount?.(editor))\n\n\t\treturn () => {\n\t\t\tunsubs.forEach((fn) => fn?.())\n\t\t}\n\t})\n\n\tuseLayoutEffect(() => {\n\t\tif (editor) return onMountEvent?.(editor)\n\t}, [editor, onMountEvent])\n\n\treturn null\n}\n\n// duped from tldraw editor\nfunction useEvent<Args extends Array<unknown>, Result>(\n\thandler: (...args: Args) => Result\n): (...args: Args) => Result {\n\tconst handlerRef = useRef<(...args: Args) => Result>()\n\n\tuseLayoutEffect(() => {\n\t\thandlerRef.current = handler\n\t})\n\n\tuseDebugValue(handler)\n\n\treturn useCallback((...args: Args) => {\n\t\tconst fn = handlerRef.current\n\t\tassert(fn, 'fn does not exist')\n\t\treturn fn(...args)\n\t}, [])\n}\n"],
  "mappings": "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",
  "names": ["editor"]
}
