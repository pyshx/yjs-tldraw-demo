{
  "version": 3,
  "sources": ["../../../../../src/lib/tools/SelectTool/children/Resizing.ts"],
  "sourcesContent": ["import {\n\tMatrix2d,\n\tPI,\n\tPI2,\n\tSelectionCorner,\n\tSelectionEdge,\n\tStateNode,\n\tTAU,\n\tTLEnterEventHandler,\n\tTLEventHandlers,\n\tTLFrameShape,\n\tTLPointerEventInfo,\n\tTLShape,\n\tTLShapeId,\n\tTLShapePartial,\n\tVec2d,\n\tVecLike,\n\tareAnglesCompatible,\n} from '@tldraw/editor'\n\ntype ResizingInfo = TLPointerEventInfo & {\n\ttarget: 'selection'\n\thandle: SelectionEdge | SelectionCorner\n\tisCreating?: boolean\n\teditAfterComplete?: boolean\n\tcreationCursorOffset?: VecLike\n\tonInteractionEnd?: string\n}\n\nexport class Resizing extends StateNode {\n\tstatic override id = 'resizing'\n\n\tinfo = {} as ResizingInfo\n\n\tmarkId = ''\n\n\t// we transition into the resizing state from the geo pointing state, which starts with a shape of size w: 1, h: 1,\n\t// so if the user drags x: +50, y: +50 after mouseDown, the shape will be w: 51, h: 51, which is too many pixels, alas\n\t// so we allow passing a further offset into this state to negate such issues\n\tcreationCursorOffset = { x: 0, y: 0 } as VecLike\n\teditAfterComplete = false\n\n\tprivate snapshot = {} as any as Snapshot\n\n\toverride onEnter: TLEnterEventHandler = (info: ResizingInfo) => {\n\t\tconst {\n\t\t\tisCreating = false,\n\t\t\teditAfterComplete = false,\n\t\t\tcreationCursorOffset = { x: 0, y: 0 },\n\t\t} = info\n\n\t\tthis.info = info\n\n\t\tthis.parent.currentToolIdMask = info.onInteractionEnd\n\t\tthis.editAfterComplete = editAfterComplete\n\t\tthis.creationCursorOffset = creationCursorOffset\n\n\t\tif (info.isCreating) {\n\t\t\tthis.editor.updateInstanceState(\n\t\t\t\t{ cursor: { type: 'cross', rotation: 0 } },\n\t\t\t\t{ ephemeral: true }\n\t\t\t)\n\t\t}\n\n\t\tthis.snapshot = this._createSnapshot()\n\t\tthis.markId = isCreating ? `creating:${this.editor.onlySelectedShape!.id}` : 'starting resizing'\n\n\t\tif (!isCreating) this.editor.mark(this.markId)\n\n\t\tthis.handleResizeStart()\n\t\tthis.updateShapes()\n\t}\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = () => {\n\t\tthis.updateShapes()\n\t}\n\n\toverride onKeyDown: TLEventHandlers['onKeyDown'] = () => {\n\t\tthis.updateShapes()\n\t}\n\toverride onKeyUp: TLEventHandlers['onKeyUp'] = () => {\n\t\tthis.updateShapes()\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onComplete: TLEventHandlers['onComplete'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.cancel()\n\t}\n\n\tprivate cancel() {\n\t\t// Restore initial models\n\t\tthis.editor.bailToMark(this.markId)\n\t\tif (this.info.onInteractionEnd) {\n\t\t\tthis.editor.setCurrentTool(this.info.onInteractionEnd, {})\n\t\t} else {\n\t\t\tthis.parent.transition('idle', {})\n\t\t}\n\t}\n\n\tprivate complete() {\n\t\tthis.handleResizeEnd()\n\n\t\tif (this.editAfterComplete && this.editor.onlySelectedShape) {\n\t\t\tthis.editor.setEditingShape(this.editor.onlySelectedShape.id)\n\t\t\tthis.editor.setCurrentTool('select.editing_shape')\n\t\t\treturn\n\t\t}\n\n\t\tif (this.editor.instanceState.isToolLocked && this.info.onInteractionEnd) {\n\t\t\tthis.editor.setCurrentTool(this.info.onInteractionEnd, {})\n\t\t\treturn\n\t\t}\n\n\t\tthis.parent.transition('idle', {})\n\t}\n\n\tprivate handleResizeStart() {\n\t\tconst { shapeSnapshots } = this.snapshot\n\n\t\tconst changes: TLShapePartial[] = []\n\n\t\tshapeSnapshots.forEach(({ shape }) => {\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst change = util.onResizeStart?.(shape)\n\t\t\tif (change) {\n\t\t\t\tchanges.push(change)\n\t\t\t}\n\t\t})\n\n\t\tif (changes.length > 0) {\n\t\t\tthis.editor.updateShapes(changes)\n\t\t}\n\t}\n\n\tprivate handleResizeEnd() {\n\t\tconst { shapeSnapshots } = this.snapshot\n\n\t\tconst changes: TLShapePartial[] = []\n\n\t\tshapeSnapshots.forEach(({ shape }) => {\n\t\t\tconst current = this.editor.getShape(shape.id)!\n\t\t\tconst util = this.editor.getShapeUtil(shape)\n\t\t\tconst change = util.onResizeEnd?.(shape, current)\n\t\t\tif (change) {\n\t\t\t\tchanges.push(change)\n\t\t\t}\n\t\t})\n\n\t\tif (changes.length > 0) {\n\t\t\tthis.editor.updateShapes(changes)\n\t\t}\n\t}\n\n\tprivate updateShapes() {\n\t\tconst { altKey, shiftKey } = this.editor.inputs\n\t\tconst {\n\t\t\tshapeSnapshots,\n\t\t\tselectionBounds,\n\t\t\tcursorHandleOffset,\n\t\t\tselectedShapeIds,\n\t\t\tselectionRotation,\n\t\t\tcanShapesDeform,\n\t\t} = this.snapshot\n\n\t\tconst isAspectRatioLocked = shiftKey || !canShapesDeform\n\n\t\t// first negate the 'cursor handle offset'\n\t\t// we need to do this because we do grid snapping based on the page point of the handle\n\t\t// rather than the page point of the cursor, so it's easier to pretend that the cursor\n\t\t// is really where the handle actually is\n\t\t//\n\t\t// *** Massively zoomed-in diagram of the initial mouseDown ***\n\t\t//\n\t\t//\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502\n\t\t//                         \u2502corner handle\n\t\t//                     \u250C\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510\n\t\t//   selection         \u2502       \u2502\n\t\t//  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   x\u25C4\u2500\u2500\u253C\u2500\u2500\u2500\u2500 drag handle point   \u25B2\n\t\t//                     \u2502       \u2502                         \u2502\n\t\t//                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u251C\u2500 cursorHandleOffset.y\n\t\t//                                                       \u2502\n\t\t//        originPagePoint\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25BAx\u2500\u2510                     \u25BC\n\t\t//                               \u2502 \u2514\u2500\u2510\n\t\t//                               \u2502   \u2514\u2500\u2510\n\t\t//                               \u2502     \u2502 mouse (sorry)\n\t\t//                               \u2514\u2500\u2500\u2510 \u250C\u2518\n\t\t//                                  \u2502 \u2502\n\t\t//                                  \u2514\u2500\u2518\n\t\t//                         \u25C4\u2500\u2500\u252C\u2500\u2500\u25BA\n\t\t//                            \u2502\n\t\t//                   cursorHandleOffset.x\n\n\t\tconst { ctrlKey } = this.editor.inputs\n\n\t\tconst currentPagePoint = this.editor.inputs.currentPagePoint\n\t\t\t.clone()\n\t\t\t.sub(cursorHandleOffset)\n\t\t\t.sub(this.creationCursorOffset)\n\t\tconst originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset)\n\n\t\tif (this.editor.instanceState.isGridMode && !ctrlKey) {\n\t\t\tconst { gridSize } = this.editor.documentSettings\n\t\t\tcurrentPagePoint.snapToGrid(gridSize)\n\t\t}\n\n\t\tconst dragHandle = this.info.handle as SelectionCorner | SelectionEdge\n\t\tconst scaleOriginHandle = rotateSelectionHandle(dragHandle, Math.PI)\n\n\t\tthis.editor.snaps.clear()\n\n\t\tconst shouldSnap = this.editor.user.isSnapMode ? !ctrlKey : ctrlKey\n\n\t\tif (shouldSnap && selectionRotation % TAU === 0) {\n\t\t\tconst { nudge } = this.editor.snaps.snapResize({\n\t\t\t\tdragDelta: Vec2d.Sub(currentPagePoint, originPagePoint),\n\t\t\t\tinitialSelectionPageBounds: this.snapshot.initialSelectionPageBounds,\n\t\t\t\thandle: rotateSelectionHandle(dragHandle, selectionRotation),\n\t\t\t\tisAspectRatioLocked,\n\t\t\t\tisResizingFromCenter: altKey,\n\t\t\t})\n\n\t\t\tcurrentPagePoint.add(nudge)\n\t\t}\n\n\t\t// get the page point of the selection handle opposite to the drag handle\n\t\t// or the center of the selection box if altKey is pressed\n\t\tconst scaleOriginPage = Vec2d.RotWith(\n\t\t\taltKey ? selectionBounds.center : selectionBounds.getHandlePoint(scaleOriginHandle),\n\t\t\tselectionBounds.point,\n\t\t\tselectionRotation\n\t\t)\n\n\t\t// calculate the scale by measuring the current distance between the drag handle and the scale origin\n\t\t// and dividing by the original distance between the drag handle and the scale origin\n\n\t\tconst distanceFromScaleOriginNow = Vec2d.Sub(currentPagePoint, scaleOriginPage).rot(\n\t\t\t-selectionRotation\n\t\t)\n\n\t\tconst distanceFromScaleOriginAtStart = Vec2d.Sub(originPagePoint, scaleOriginPage).rot(\n\t\t\t-selectionRotation\n\t\t)\n\n\t\tconst scale = Vec2d.DivV(distanceFromScaleOriginNow, distanceFromScaleOriginAtStart)\n\n\t\tif (!Number.isFinite(scale.x)) scale.x = 1\n\t\tif (!Number.isFinite(scale.y)) scale.y = 1\n\n\t\tconst isXLocked = dragHandle === 'top' || dragHandle === 'bottom'\n\t\tconst isYLocked = dragHandle === 'left' || dragHandle === 'right'\n\n\t\t// lock an axis if required\n\t\tif (isAspectRatioLocked) {\n\t\t\tif (isYLocked) {\n\t\t\t\t// holding shift and dragging either the left or the right edge\n\t\t\t\tscale.y = Math.abs(scale.x)\n\t\t\t} else if (isXLocked) {\n\t\t\t\t// holding shift and dragging either the top or the bottom edge\n\t\t\t\tscale.x = Math.abs(scale.y)\n\t\t\t} else if (Math.abs(scale.x) > Math.abs(scale.y)) {\n\t\t\t\t// holding shift and the drag has moved further in the x dimension\n\t\t\t\tscale.y = Math.abs(scale.x) * (scale.y < 0 ? -1 : 1)\n\t\t\t} else {\n\t\t\t\t// holding shift and the drag has moved further in the y dimension\n\t\t\t\tscale.x = Math.abs(scale.y) * (scale.x < 0 ? -1 : 1)\n\t\t\t}\n\t\t} else {\n\t\t\t// not holding shift, but still need to lock axes if dragging an edge\n\t\t\tif (isXLocked) {\n\t\t\t\tscale.x = 1\n\t\t\t}\n\t\t\tif (isYLocked) {\n\t\t\t\tscale.y = 1\n\t\t\t}\n\t\t}\n\n\t\tif (!this.info.isCreating) {\n\t\t\tthis.updateCursor({\n\t\t\t\tdragHandle,\n\t\t\t\tisFlippedX: scale.x < 0,\n\t\t\t\tisFlippedY: scale.y < 0,\n\t\t\t\trotation: selectionRotation,\n\t\t\t})\n\t\t}\n\n\t\tfor (const id of shapeSnapshots.keys()) {\n\t\t\tconst snapshot = shapeSnapshots.get(id)!\n\n\t\t\tthis.editor.resizeShape(id, scale, {\n\t\t\t\tinitialShape: snapshot.shape,\n\t\t\t\tinitialBounds: snapshot.bounds,\n\t\t\t\tinitialPageTransform: snapshot.pageTransform,\n\t\t\t\tdragHandle,\n\t\t\t\tmode:\n\t\t\t\t\tselectedShapeIds.length === 1 && id === selectedShapeIds[0]\n\t\t\t\t\t\t? 'resize_bounds'\n\t\t\t\t\t\t: 'scale_shape',\n\t\t\t\tscaleOrigin: scaleOriginPage,\n\t\t\t\tscaleAxisRotation: selectionRotation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// ---\n\n\tprivate updateCursor({\n\t\tdragHandle,\n\t\tisFlippedX,\n\t\tisFlippedY,\n\t\trotation,\n\t}: {\n\t\tdragHandle: SelectionCorner | SelectionEdge\n\t\tisFlippedX: boolean\n\t\tisFlippedY: boolean\n\t\trotation: number\n\t}) {\n\t\tconst nextCursor = { ...this.editor.instanceState.cursor }\n\n\t\tswitch (dragHandle) {\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tnextCursor.type = 'nwse-resize'\n\t\t\t\tif (isFlippedX !== isFlippedY) {\n\t\t\t\t\tnextCursor.type = 'nesw-resize'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tnextCursor.type = 'nesw-resize'\n\t\t\t\tif (isFlippedX !== isFlippedY) {\n\t\t\t\t\tnextCursor.type = 'nwse-resize'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tnextCursor.rotation = rotation\n\n\t\tthis.editor.setCursor(nextCursor)\n\t}\n\n\toverride onExit = () => {\n\t\tthis.parent.currentToolIdMask = undefined\n\t\tthis.editor.updateInstanceState(\n\t\t\t{ cursor: { type: 'default', rotation: 0 } },\n\t\t\t{ ephemeral: true }\n\t\t)\n\t\tthis.editor.snaps.clear()\n\t}\n\n\t_createSnapshot = () => {\n\t\tconst {\n\t\t\tselectedShapeIds,\n\t\t\tselectionRotation,\n\t\t\tinputs: { originPagePoint },\n\t\t} = this.editor\n\n\t\tconst selectionBounds = this.editor.selectionRotatedPageBounds!\n\n\t\tconst dragHandlePoint = Vec2d.RotWith(\n\t\t\tselectionBounds.getHandlePoint(this.info.handle!),\n\t\t\tselectionBounds.point,\n\t\t\tselectionRotation\n\t\t)\n\n\t\tconst cursorHandleOffset = Vec2d.Sub(originPagePoint, dragHandlePoint)\n\n\t\tconst shapeSnapshots = new Map<TLShapeId, ShapeSnapshot>()\n\n\t\tselectedShapeIds.forEach((id) => {\n\t\t\tconst shape = this.editor.getShape(id)\n\t\t\tif (shape) {\n\t\t\t\tshapeSnapshots.set(shape.id, this._createShapeSnapshot(shape))\n\t\t\t\tif (\n\t\t\t\t\tthis.editor.isShapeOfType<TLFrameShape>(shape, 'frame') &&\n\t\t\t\t\tselectedShapeIds.length === 1\n\t\t\t\t)\n\t\t\t\t\treturn\n\t\t\t\tthis.editor.visitDescendants(shape.id, (descendantId) => {\n\t\t\t\t\tconst descendent = this.editor.getShape(descendantId)\n\t\t\t\t\tif (descendent) {\n\t\t\t\t\t\tshapeSnapshots.set(descendent.id, this._createShapeSnapshot(descendent))\n\t\t\t\t\t\tif (this.editor.isShapeOfType<TLFrameShape>(descendent, 'frame')) {\n\t\t\t\t\t\t\treturn false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\tconst canShapesDeform = ![...shapeSnapshots.values()].some(\n\t\t\t(shape) =>\n\t\t\t\t!areAnglesCompatible(shape.pageRotation, selectionRotation) || shape.isAspectRatioLocked\n\t\t)\n\n\t\treturn {\n\t\t\tshapeSnapshots,\n\t\t\tselectionBounds,\n\t\t\tcursorHandleOffset,\n\t\t\tselectionRotation,\n\t\t\tselectedShapeIds,\n\t\t\tcanShapesDeform,\n\t\t\tinitialSelectionPageBounds: this.editor.selectionPageBounds!,\n\t\t}\n\t}\n\n\t_createShapeSnapshot = (shape: TLShape) => {\n\t\tconst pageTransform = this.editor.getShapePageTransform(shape)!\n\t\tconst util = this.editor.getShapeUtil(shape)\n\n\t\treturn {\n\t\t\tshape,\n\t\t\tbounds: this.editor.getShapeGeometry(shape).bounds,\n\t\t\tpageTransform,\n\t\t\tpageRotation: Matrix2d.Decompose(pageTransform!).rotation,\n\t\t\tisAspectRatioLocked: util.isAspectRatioLocked(shape),\n\t\t}\n\t}\n}\n\ntype Snapshot = ReturnType<Resizing['_createSnapshot']>\ntype ShapeSnapshot = ReturnType<Resizing['_createShapeSnapshot']>\n\nconst ORDERED_SELECTION_HANDLES: (SelectionEdge | SelectionCorner)[] = [\n\t'top',\n\t'top_right',\n\t'right',\n\t'bottom_right',\n\t'bottom',\n\t'bottom_left',\n\t'left',\n\t'top_left',\n]\n\nexport function rotateSelectionHandle(handle: SelectionEdge | SelectionCorner, rotation: number) {\n\t// first find out how many tau we need to rotate by\n\trotation = rotation % PI2\n\tconst numSteps = Math.round(rotation / (PI / 4))\n\n\tconst currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle)\n\treturn ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length]\n}\n"],
  "mappings": "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",
  "names": []
}
