{
  "version": 3,
  "sources": ["../../../src/lib/ui/TldrawUi.tsx"],
  "sourcesContent": ["import { ToastProvider } from '@radix-ui/react-toast'\nimport { useEditor, useValue } from '@tldraw/editor'\nimport classNames from 'classnames'\nimport React, { ReactNode } from 'react'\nimport { TldrawUiContextProvider, TldrawUiContextProviderProps } from './TldrawUiContextProvider'\nimport { BackToContent } from './components/BackToContent'\nimport { DebugPanel } from './components/DebugPanel'\nimport { Dialogs } from './components/Dialogs'\nimport { FollowingIndicator } from './components/FollowingIndicator'\nimport { HelpMenu } from './components/HelpMenu'\nimport { MenuZone } from './components/MenuZone'\nimport { NavigationZone } from './components/NavigationZone/NavigationZone'\nimport { ExitPenMode } from './components/PenModeToggle'\nimport { StopFollowing } from './components/StopFollowing'\nimport { StylePanel } from './components/StylePanel/StylePanel'\nimport { ToastViewport, Toasts } from './components/Toasts'\nimport { Toolbar } from './components/Toolbar/Toolbar'\nimport { Button } from './components/primitives/Button'\nimport { useActions } from './hooks/useActions'\nimport { useBreakpoint } from './hooks/useBreakpoint'\nimport { useNativeClipboardEvents } from './hooks/useClipboardEvents'\nimport { useEditorEvents } from './hooks/useEditorEvents'\nimport { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts'\nimport { useTranslation } from './hooks/useTranslation/useTranslation'\n\n/**\n * Props for the {@link @tldraw/tldraw#Tldraw} and {@link TldrawUi} components.\n *\n * @public\n */\nexport type TldrawUiProps = TldrawUiBaseProps & TldrawUiContextProviderProps\n\n/**\n * Base props for the {@link @tldraw/tldraw#Tldraw} and {@link TldrawUi} components.\n *\n * @public\n */\nexport interface TldrawUiBaseProps {\n\t/**\n\t * The component's children.\n\t */\n\tchildren?: ReactNode\n\n\t/**\n\t * Whether to hide the user interface and only display the canvas.\n\t */\n\thideUi?: boolean\n\n\t/**\n\t * A component to use for the share zone (will be deprecated)\n\t */\n\tshareZone?: ReactNode\n\n\t/**\n\t * A component to use for the top zone (will be deprecated)\n\t * @internal\n\t */\n\ttopZone?: ReactNode\n\n\t/**\n\t * Additional items to add to the debug menu (will be deprecated)\n\t */\n\trenderDebugMenuItems?: () => React.ReactNode\n}\n\n/**\n * @public\n */\nexport const TldrawUi = React.memo(function TldrawUi({\n\tshareZone,\n\ttopZone,\n\trenderDebugMenuItems,\n\tchildren,\n\thideUi,\n\t...rest\n}: TldrawUiProps) {\n\treturn (\n\t\t<TldrawUiContextProvider {...rest}>\n\t\t\t<TldrawUiInner\n\t\t\t\thideUi={hideUi}\n\t\t\t\tshareZone={shareZone}\n\t\t\t\ttopZone={topZone}\n\t\t\t\trenderDebugMenuItems={renderDebugMenuItems}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</TldrawUiInner>\n\t\t</TldrawUiContextProvider>\n\t)\n})\n\ntype TldrawUiContentProps = {\n\thideUi?: boolean\n\tshareZone?: ReactNode\n\ttopZone?: ReactNode\n\trenderDebugMenuItems?: () => React.ReactNode\n}\n\nconst TldrawUiInner = React.memo(function TldrawUiInner({\n\tchildren,\n\thideUi,\n\t...rest\n}: TldrawUiContentProps & { children: ReactNode }) {\n\t// The hideUi prop should prevent the UI from mounting.\n\t// If we ever need want the UI to mount and preserve state, then\n\t// we should change this behavior and hide the UI via CSS instead.\n\n\treturn (\n\t\t<>\n\t\t\t{children}\n\t\t\t{hideUi ? null : <TldrawUiContent {...rest} />}\n\t\t</>\n\t)\n})\n\nconst TldrawUiContent = React.memo(function TldrawUI({\n\tshareZone,\n\ttopZone,\n\trenderDebugMenuItems,\n}: TldrawUiContentProps) {\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\tconst breakpoint = useBreakpoint()\n\tconst isReadonlyMode = useValue('isReadonlyMode', () => editor.instanceState.isReadonly, [editor])\n\tconst isFocusMode = useValue('focus', () => editor.instanceState.isFocusMode, [editor])\n\tconst isDebugMode = useValue('debug', () => editor.instanceState.isDebugMode, [editor])\n\n\tuseKeyboardShortcuts()\n\tuseNativeClipboardEvents()\n\tuseEditorEvents()\n\n\tconst { 'toggle-focus-mode': toggleFocus } = useActions()\n\n\treturn (\n\t\t<ToastProvider>\n\t\t\t<div\n\t\t\t\tclassName={classNames('tlui-layout', {\n\t\t\t\t\t'tlui-layout__mobile': breakpoint < 5,\n\t\t\t\t})}\n\t\t\t\tdata-breakpoint={breakpoint}\n\t\t\t>\n\t\t\t\t{isFocusMode ? (\n\t\t\t\t\t<div className=\"tlui-layout__top\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"tlui-focus-button\"\n\t\t\t\t\t\t\ttitle={`${msg('focus-mode.toggle-focus-mode')}`}\n\t\t\t\t\t\t\ticon=\"dot\"\n\t\t\t\t\t\t\tonClick={() => toggleFocus.onSelect('menu')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"tlui-layout__top\">\n\t\t\t\t\t\t\t<div className=\"tlui-layout__top__left\">\n\t\t\t\t\t\t\t\t<MenuZone />\n\t\t\t\t\t\t\t\t<div className=\"tlui-helper-buttons\">\n\t\t\t\t\t\t\t\t\t<ExitPenMode />\n\t\t\t\t\t\t\t\t\t<BackToContent />\n\t\t\t\t\t\t\t\t\t<StopFollowing />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"tlui-layout__top__center\">{topZone}</div>\n\t\t\t\t\t\t\t<div className=\"tlui-layout__top__right\">\n\t\t\t\t\t\t\t\t{shareZone}\n\t\t\t\t\t\t\t\t{breakpoint >= 5 && !isReadonlyMode && (\n\t\t\t\t\t\t\t\t\t<div className=\"tlui-style-panel__wrapper\">\n\t\t\t\t\t\t\t\t\t\t<StylePanel />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"tlui-layout__bottom\">\n\t\t\t\t\t\t\t<div className=\"tlui-layout__bottom__main\">\n\t\t\t\t\t\t\t\t<NavigationZone />\n\t\t\t\t\t\t\t\t<Toolbar />\n\t\t\t\t\t\t\t\t{breakpoint >= 4 && <HelpMenu />}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{isDebugMode && <DebugPanel renderDebugMenuItems={renderDebugMenuItems ?? null} />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t<Toasts />\n\t\t\t\t<Dialogs />\n\t\t\t\t<ToastViewport />\n\t\t\t\t<FollowingIndicator />\n\t\t\t</div>\n\t\t</ToastProvider>\n\t)\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA8EG;AA9EH,yBAA8B;AAC9B,oBAAoC;AACpC,wBAAuB;AACvB,mBAAiC;AACjC,qCAAsE;AACtE,2BAA8B;AAC9B,wBAA2B;AAC3B,qBAAwB;AACxB,gCAAmC;AACnC,sBAAyB;AACzB,sBAAyB;AACzB,4BAA+B;AAC/B,2BAA4B;AAC5B,2BAA8B;AAC9B,wBAA2B;AAC3B,oBAAsC;AACtC,qBAAwB;AACxB,oBAAuB;AACvB,wBAA2B;AAC3B,2BAA8B;AAC9B,gCAAyC;AACzC,6BAAgC;AAChC,kCAAqC;AACrC,4BAA+B;AA6CxB,MAAM,WAAW,aAAAA,QAAM,KAAK,SAASC,UAAS;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACJ,GAAkB;AACjB,SACC,4CAAC,0DAAyB,GAAG,MAC5B;AAAA,IAAC;AAAA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEC;AAAA;AAAA,EACF,GACD;AAEF,CAAC;AASD,MAAM,gBAAgB,aAAAD,QAAM,KAAK,SAASE,eAAc;AAAA,EACvD;AAAA,EACA;AAAA,EACA,GAAG;AACJ,GAAmD;AAKlD,SACC,4EACE;AAAA;AAAA,IACA,SAAS,OAAO,4CAAC,mBAAiB,GAAG,MAAM;AAAA,KAC7C;AAEF,CAAC;AAED,MAAM,kBAAkB,aAAAF,QAAM,KAAK,SAAS,SAAS;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AACD,GAAyB;AACxB,QAAM,aAAS,yBAAU;AACzB,QAAM,UAAM,sCAAe;AAC3B,QAAM,iBAAa,oCAAc;AACjC,QAAM,qBAAiB,wBAAS,kBAAkB,MAAM,OAAO,cAAc,YAAY,CAAC,MAAM,CAAC;AACjG,QAAM,kBAAc,wBAAS,SAAS,MAAM,OAAO,cAAc,aAAa,CAAC,MAAM,CAAC;AACtF,QAAM,kBAAc,wBAAS,SAAS,MAAM,OAAO,cAAc,aAAa,CAAC,MAAM,CAAC;AAEtF,wDAAqB;AACrB,0DAAyB;AACzB,8CAAgB;AAEhB,QAAM,EAAE,qBAAqB,YAAY,QAAI,8BAAW;AAExD,SACC,4CAAC,oCACA;AAAA,IAAC;AAAA;AAAA,MACA,eAAW,kBAAAG,SAAW,eAAe;AAAA,QACpC,uBAAuB,aAAa;AAAA,MACrC,CAAC;AAAA,MACD,mBAAiB;AAAA,MAEhB;AAAA,sBACA,4CAAC,SAAI,WAAU,oBACd;AAAA,UAAC;AAAA;AAAA,YACA,WAAU;AAAA,YACV,OAAO,GAAG,IAAI,8BAA8B,CAAC;AAAA,YAC7C,MAAK;AAAA,YACL,SAAS,MAAM,YAAY,SAAS,MAAM;AAAA;AAAA,QAC3C,GACD,IAEA,4EACC;AAAA,uDAAC,SAAI,WAAU,oBACd;AAAA,yDAAC,SAAI,WAAU,0BACd;AAAA,0DAAC,4BAAS;AAAA,cACV,6CAAC,SAAI,WAAU,uBACd;AAAA,4DAAC,oCAAY;AAAA,gBACb,4CAAC,sCAAc;AAAA,gBACf,4CAAC,sCAAc;AAAA,iBAChB;AAAA,eACD;AAAA,YACA,4CAAC,SAAI,WAAU,4BAA4B,mBAAQ;AAAA,YACnD,6CAAC,SAAI,WAAU,2BACb;AAAA;AAAA,cACA,cAAc,KAAK,CAAC,kBACpB,4CAAC,SAAI,WAAU,6BACd,sDAAC,gCAAW,GACb;AAAA,eAEF;AAAA,aACD;AAAA,UACA,6CAAC,SAAI,WAAU,uBACd;AAAA,yDAAC,SAAI,WAAU,6BACd;AAAA,0DAAC,wCAAe;AAAA,cAChB,4CAAC,0BAAQ;AAAA,cACR,cAAc,KAAK,4CAAC,4BAAS;AAAA,eAC/B;AAAA,YACC,eAAe,4CAAC,gCAAW,sBAAsB,wBAAwB,MAAM;AAAA,aACjF;AAAA,WACD;AAAA,QAED,4CAAC,wBAAO;AAAA,QACR,4CAAC,0BAAQ;AAAA,QACT,4CAAC,+BAAc;AAAA,QACf,4CAAC,gDAAmB;AAAA;AAAA;AAAA,EACrB,GACD;AAEF,CAAC;",
  "names": ["React", "TldrawUi", "TldrawUiInner", "classNames"]
}
